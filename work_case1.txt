(Сарапин Я.)
Git - це система контролю версій, за допомогою якої можна відстежувати історію розробки програмного забезпечення та спільно працювати над проектом.

Основні дії, які виконують в git це: створення власного репозиторію, створення копій коду з чужих репозиторіїв, перегляд їхнього стану, додавання файлів, моніторинг змін, перегляд історії комітів та інш.

Основні команди:
git init - дозволяє створити нове сховище Git;
git clone - створює локальну робочу копію вихідного коду з віддаленого сховища;
git branch - дозволяє додати нову гілку до вже існуючої, переглянути всі існуючі гілки та видалити їх;
git checkout - дозволяє перейти до існуючої гілки або створити та перейти до нової гілки;
git add - додає зміни у файл до робочої області, де ви можна порівняти свою локальну версію та версію у віддаленому сховищі;
git commit - зберігає зміни в локальному сховищі;
git push - надсилає зафіксовані зміни файлу з локального репозиторію у віддалений репозиторій;
git pull отримує останні завантажені зміни з віддаленого сервера в локальне сховище;
git merge - об’єднує гілку з батьківською гілкою;
git status - надає огляд поточного стану вашого сховища.

(Кошкін І.)
2. Комміт — це операція у системах контролю версій, яка фіксує знімок змін, внесених до файлів. Комміт зберігає стан проєкту на певний момент часу і дозволяє відслідковувати історію змін.

Комміт дозволяє відслідковувати зміни у файлах таким чином:

1.	Збереження знімків стану файлів: при кожному комміті система контролю версій (наприклад, Git) створює знімок (snapshot) змінених файлів і зберігає їх в історії репозиторію.

2.	Історія змін: комміти формують послідовність змін, кожен комміт містить інформацію про автора, час змін і опис, що пояснює суть змін.

3.	Відновлення версій: завдяки коммітам можна повертатися до попередніх версій файлів або проєкту, переглядати відмінності між різними версіями та виправляти помилки.

4.	Відстеження окремих змін: кожен комміт має унікальний ідентифікатор (хеш), що дозволяє однозначно посилатися на конкретну зміну. Це дає можливість ефективно управляти проєктом і співпрацювати з іншими розробниками.

Комміти є ключовим механізмом для контролю версій, оскільки вони зберігають послідовність і історію всіх змін у проєкті.

(Кочубей С.)
Висновки:
Підбиваючи підсумки роботи з Git, ми навчилися основам використання системи контролю версій для керування проектами. Це включає:

Створення та ініціалізація репозиторію — ми можемо створити власне сховище для проекту і відстежувати його зміни з самого початку.
Спільна робота через віддалені репозиторії — команди git clone, git pull та git push дозволяють нам ефективно працювати в команді, синхронізуючи зміни між локальними та віддаленими репозиторіями.
Відстеження та фіксація змін — за допомогою коммітів ми можемо документувати кожен важливий етап змін у проекті, зберігаючи його історію.
Робота з гілками — створення, перемикання між гілками та об'єднання змін (команди git branch, git checkout, git merge) дозволяє працювати над різними функціями проекту паралельно та уникати конфліктів.
Таким чином, ми оволоділи інструментами, які дозволяють контролювати розвиток проекту, вести його історію і працювати над ним у команді, з можливістю відновлення попередніх версій та ефективного вирішення конфліктів.
